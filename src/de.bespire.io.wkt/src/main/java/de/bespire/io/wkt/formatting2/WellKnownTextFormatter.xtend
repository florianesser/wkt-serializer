/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package de.bespire.io.wkt.formatting2

import com.google.inject.Inject
import de.bespire.io.wkt.services.WellKnownTextGrammarAccess
import de.bespire.io.wkt.wkt.CRS
import de.bespire.io.wkt.wkt.GeodeticCRS
import de.bespire.io.wkt.wkt.WKT
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import de.bespire.io.wkt.wkt.CoordinateSystem
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion

class WellKnownTextFormatter extends AbstractFormatter2 {
	
	@Inject extension WellKnownTextGrammarAccess

	def dispatch void format(WKT wKT, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
//		wKT.regionFor.keyword("[").prepend[noSpace].append[noSpace]
//		wKT.regionFor.keyword("GEODCRS").prepend[noSpace]
		for (CRS wkt : wKT.getWkt()) {
			for (ISemanticRegion region : wkt.allSemanticRegions) {
				region.append[noSpace].prepend[noSpace]
			}
//			wkt.regionFor.keyword(",").prepend[noSpace].append[noSpace]
//			wkt.regionFor.keyword("[").prepend[noSpace].append[noSpace]
//			wkt.regionFor.keyword("]").prepend[noSpace].append[noSpace]
//			wkt.regionFor.keyword("GEODCRS").prepend[noSpace]
//			wkt.regionFor.keyword("VERTCRS").prepend[noSpace]
//			if (wkt instanceof GeodeticCRS) {
//				wkt.coordinateSystem.regionFor.keyword(",").prepend[noSpace].append[noSpace]
//				wkt.coordinateSystem.regionFor.keyword("[").prepend[noSpace].append[noSpace]
//				wkt.coordinateSystem.regionFor.keyword("]").prepend[noSpace].append[noSpace]
//				wkt.coordinateSystem.regionFor.keyword("CS").prepend[noSpace]
//				wkt.datum.regionFor.keyword("DATUM").prepend[noSpace]
//				wkt.datum.regionFor.keyword(",").prepend[noSpace].append[noSpace]
//				wkt.datum.regionFor.keyword("[").prepend[noSpace].append[noSpace]
//				wkt.datum.regionFor.keyword("]").prepend[noSpace].append[noSpace]
//				wkt.datum.ellipsoid.allRegionsFor.keyword(",").prepend[noSpace].append[noSpace]
//				wkt.datum.ellipsoid.regionFor.keyword("[").prepend[noSpace].append[noSpace]
//				wkt.datum.ellipsoid.regionFor.keyword("]").prepend[noSpace].append[noSpace]
//				wkt.datum.ellipsoid.regionFor.keyword("ELLIPSOID").prepend[noSpace]
//				wkt.datum.ellipsoid.format
//				wkt.datum.primeMeridian.regionFor.keyword(",").prepend[noSpace].append[noSpace]
//				wkt.datum.primeMeridian.regionFor.keyword("[").prepend[noSpace].append[noSpace]
//				wkt.datum.primeMeridian.regionFor.keyword("]").prepend[noSpace].append[noSpace]
//				wkt.datum.primeMeridian.regionFor.keyword("PRIMEM").prepend[noSpace]
//				wkt.datum.primeMeridian.format
//				wkt.coordinateSystem.format
//			}			
			
			wkt.format
		}
	}
	
	// TODO: implement for 
}
